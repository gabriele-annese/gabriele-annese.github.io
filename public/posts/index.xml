<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Terminal</title>
    <link>//localhost:1313/posts/</link>
    <description>Recent content in Posts on Terminal</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 05 May 2024 14:09:01 +0200</lastBuildDate><atom:link href="//localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Intro to C2 Framework</title>
      <link>//localhost:1313/posts/introtoc2framework/</link>
      <pubDate>Sun, 05 May 2024 14:09:01 +0200</pubDate>
      
      <guid>//localhost:1313/posts/introtoc2framework/</guid>
      <description>Introduction Commad and Control (C2) Frameworks are an essential part of both Red Temmers and Advanced Adversaries playbooks. They make it both easy to manage compromised devices during a engagement and often help aid in laterl movement.
Command and Control Framework Structure What is a Command and Control Framework In order to better understand what a C2 Framework is at its most basic level, think of Netcat listener (the C2 server) that is capable of handling many reverse shells calling back at once (C2 Agent).</description>
      <content>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Commad and Control (C2) Frameworks are an essential part of both Red Temmers and Advanced Adversaries playbooks. They make it both easy to manage compromised devices during a engagement and often help aid in laterl movement.&lt;/p&gt;
&lt;h3 id=&#34;command-and-control-framework-structure&#34;&gt;Command and Control Framework Structure&lt;/h3&gt;
&lt;h2 id=&#34;what-is-a-command-and-control-framework&#34;&gt;What is a Command and Control Framework&lt;/h2&gt;
&lt;p&gt;In order to better understand what a C2 Framework is at its most basic level, think of Netcat listener (&lt;strong&gt;the C2 server&lt;/strong&gt;) that is capable of handling many reverse shells calling back at once (&lt;strong&gt;C2 Agent&lt;/strong&gt;). It&amp;rsquo;s a server but for reverse shell. Unlike Netcat almost C2 framework require a special payload generetor. Example &lt;strong&gt;Metasploit&lt;/strong&gt; have the own paylod generator &lt;strong&gt;MSFVenom&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;The Diagram depicts three compromised clients calling back to a c2 Server&#34; src=&#34;../../img/C2-Callback.png&#34;&gt;.&lt;/p&gt;
&lt;h2 id=&#34;command-and-control-structure&#34;&gt;Command and Control Structure&lt;/h2&gt;
&lt;h3 id=&#34;c2-server&#34;&gt;C2 Server&lt;/h3&gt;
&lt;p&gt;In order to understand a C2 framework, we must first by understanding the various components of a C2 server. The &lt;strong&gt;C2 server&lt;/strong&gt; as a hub for agents to call back to. Agents will periodically reach out to the &lt;strong&gt;C2 server&lt;/strong&gt; and wait the operator&amp;rsquo;s command.&lt;/p&gt;
&lt;h3 id=&#34;agents-payloads&#34;&gt;Agents / Payloads&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;An agent is a program generated by the C2 framework*&lt;/strong&gt; that calls back to a listener on a C2 server. Most of C2 framewrok implement pseudo    commands to make the C2 Operator&amp;rsquo;s life easier. Some examples of this may be pseudo command &lt;strong&gt;Download&lt;/strong&gt; or &lt;strong&gt;Upload&lt;/strong&gt; a file onto the system. It&amp;rsquo;s important to know that &lt;strong&gt;agents ca be higly configurable&lt;/strong&gt;, with adjustaments on the timing of how often C2 Agents beacon out to a Listener on a C2 Server and much more.&lt;/p&gt;
&lt;h3 id=&#34;listeners&#34;&gt;Listeners&lt;/h3&gt;
&lt;p&gt;On the most basic level, a &lt;strong&gt;listener is an application running on the C2 Server&lt;/strong&gt; that waits for a callback over a specific port or protocol.&lt;/p&gt;
&lt;h3 id=&#34;beacons&#34;&gt;Beacons&lt;/h3&gt;
&lt;p&gt;A &lt;strong&gt;Beacon is the process of a C2 Agent calling back to the listener&lt;/strong&gt; running on a C2 server.&lt;/p&gt;
&lt;h2 id=&#34;obfuscating-agent-callbacks&#34;&gt;Obfuscating Agent Callbacks&lt;/h2&gt;
&lt;h3 id=&#34;sleep-timers&#34;&gt;Sleep Timers&lt;/h3&gt;
&lt;p&gt;One key thing that some security analysts, anti-virus, and next-generation firewalls &lt;strong&gt;look for when attempting to indetify C2 traffic is beaconing&lt;/strong&gt; and the rate at which a device beacons out to a C2 server.Let&amp;rsquo;s say firewall observed traffic that looks like&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TCP/443 ; Session Duration 3s, 55 packets sent, 10:00:05.000&lt;/li&gt;
&lt;li&gt;TCP/443 ; Session Duration 2s, 33 packets sent, 10:00:10.000&lt;/li&gt;
&lt;li&gt;TCP/443 ; Session Duration 3s, 55 packets sent, 10:00:15.000&lt;/li&gt;
&lt;li&gt;TCP/443 ; Session Duration 1s, 33 packets sent, 10:00:20.000&lt;/li&gt;
&lt;li&gt;TCP/443 ; Session Duration 3s, 55 packets sent, 10:00:25.000&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A pattern is starting to form.The agent beacons out every 5 seconds; this meas that it has a sleep timer of 5 seconds.&lt;/p&gt;
&lt;h3 id=&#34;jitter&#34;&gt;Jitter&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Jitter takes the sleep timer and adds some variation to it.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TCP/443 ; Session Duration 3s, 55 packets sent, 10:00:03.580&lt;/li&gt;
&lt;li&gt;TCP/443 ; Session Duration 2s, 33 packets sent, 10:00:13.213&lt;/li&gt;
&lt;li&gt;TCP/443 ; Session Duration 3s, 55 packets sent, 10:00:14.912&lt;/li&gt;
&lt;li&gt;TCP/443 ; Session Duration 1s, 33 packets sent, 10:00:23.444&lt;/li&gt;
&lt;li&gt;TCP/443 ; Session Duration 3s, 55 packets sent, 10:00:27.182&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The beaconing is now set at semi-irregular pattern that makes it slightly more difficult to identify among regular user traffic. In more advaced C2 framework it may possibile be alter various other parameter like &amp;ldquo;File&amp;rdquo; jitter or adding junk data to the payload ort files begin trasmitted to make its emm larger than it actually is.&lt;/p&gt;
&lt;p&gt;Sample Python3 code for Jitter may look like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; random
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sleep &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jitter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;randint(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sleep &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; sleep &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; jitter
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;payload-types&#34;&gt;Payload Types&lt;/h2&gt;
&lt;p&gt;There are two type of payloads in C2 Framework; &lt;strong&gt;Staged&lt;/strong&gt; and &lt;strong&gt;Stageless&lt;/strong&gt; payloads.&lt;/p&gt;
&lt;h3 id=&#34;stageless-payloads&#34;&gt;Stageless Payloads&lt;/h3&gt;
&lt;p&gt;The stageless payloads are simplest of the two; &lt;strong&gt;they contain the full C2 agent and will call back to the C2 server.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;../../img/StagelessPayload.png&#34;&gt;This screenshot depicts a stageless payload calling back to a C2 server&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Steps for establishing C2 beaconing with a Satgeless payload are as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The Victim downloads and executes the Dropper.&lt;/li&gt;
&lt;li&gt;The beaconing to the C2 Server begins.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;staged-payloads&#34;&gt;Staged Payloads&lt;/h3&gt;
&lt;p&gt;Staged payloads require a callback to the C2 server to dowload additional parts of the C2 agent. Thi is commonly refferd to as &amp;ldquo;Dropper&amp;rdquo; because it &amp;ldquo;Dropped&amp;rdquo; onto the victim machine to dowload the second staged of our payload. This is a preferred method over stageless payloads beacouse a &lt;strong&gt;small amount of code needs to be written to retrive the additional parts of the C2 agent from the C2 server.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;This diagram depicts a dropper calling back to a C2 server for its second stage&#34; src=&#34;../../img/StagedPayload.png&#34;&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The Victim dowloads and executes the Dropper&lt;/li&gt;
&lt;li&gt;The Dropper calls back to the C2 server of Stage2&lt;/li&gt;
&lt;li&gt;The C2 Server sends Stage 2 back to the Victim Machine&lt;/li&gt;
&lt;li&gt;Stage 2 is loaded into memory on the Victim machine&lt;/li&gt;
&lt;li&gt;C2 Beaconing Initializes, and the Red Teamer/Threat Actors can engage with the Victim on the C2 Server.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;payload-formats&#34;&gt;Payload Formats&lt;/h2&gt;
&lt;p&gt;Windows PE files (Executables) are not the only way to eecute code on a system. Some C2 Frameworks support payloads in various other formats, for example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PowerShell Scritp
&lt;ul&gt;
&lt;li&gt;Which may contain C# code and may be compiled and execute with the Add-Type commandlet&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HTA Files&lt;/li&gt;
&lt;li&gt;JScript Files&lt;/li&gt;
&lt;li&gt;Visual Basic Application/Scripts&lt;/li&gt;
&lt;li&gt;Microsoft Office Documents&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and many more.&lt;/p&gt;
&lt;h2 id=&#34;modules&#34;&gt;Modules&lt;/h2&gt;
&lt;p&gt;Modules are a core component of any C2 Framework; they add the ability to make agents and the C2 server more flexible. Depending on the C2 Framework, scripts must be written in differnt languages. Cobal Strike has &amp;ldquo;Aggressor Scripts&amp;rdquo;. Powershell Empire has support for multiple languages, Metasploit Modules are written in Ruby..&lt;/p&gt;
&lt;h3 id=&#34;post-exploitation-modules&#34;&gt;Post Exploitation Modules&lt;/h3&gt;
&lt;p&gt;Post Exploitation modules are simply modules that deal with anything after the initial point of compromise, this could be as running SharpHound.psq to find paths pf later movement, or it could be as complex as dumping LSASS and parsing credentials in memory.&lt;/p&gt;
&lt;h3 id=&#34;pivoting-modules&#34;&gt;Pivoting Modules&lt;/h3&gt;
&lt;p&gt;One of the last major components of a C2 Framework is its pivoting modules, making it easier to access restricted network segments within the C2 Framework. If you have Administrative Access on a system you may be able to open up an &amp;ldquo;SMB Beacon&amp;rdquo;, which can enable a machine to act proxy vi athe SMB protocol, this may allow machines in a restricted network segment to comunicate with C2 server.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;This diagram dipcts multiple victims with an SMB pviot calling back to a C2 server.&#34; src=&#34;../../img/pivotSMB.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;The diagram below show how hosts within a restricted network segment call back to the C2 serve:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The Victims call back to an SMB named pipe on another Victim in a non-restricted network segment.&lt;/li&gt;
&lt;li&gt;The Victim in the non-restricted network segment calls back to the C2 Server over a standard beacon.&lt;/li&gt;
&lt;li&gt;The C2 Server then sends commands back to the Victim in the non-restricted network segment.&lt;/li&gt;
&lt;li&gt;The Victim in the non-restricted network segment then forwards the C2 instructions to the hosts in the restricted segment.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;facing-the-world&#34;&gt;Facing the world&lt;/h2&gt;
&lt;p&gt;One importat obstavle that all Red Teammers must overcone is placing infrastructure in plai vuew. There are many different methods to do this; one of the most popular methods is called &amp;ldquo;Domain Fronting&amp;rdquo;&lt;/p&gt;
&lt;h3 id=&#34;domain-fronting&#34;&gt;Domain Fronting&lt;/h3&gt;
&lt;p&gt;Domain Frontig utilizes a know good host for example Cloudflare.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;This diagram shows an example HTTP beacon from a compromised device&#34; src=&#34;../../img/DomainFronting.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;The diagram above depicts how Domain Fronting works:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The C2 Operator has a domain that proxies all requests through Cloudflare.&lt;/li&gt;
&lt;li&gt;The Victim beacons out to the C2 Domain.&lt;/li&gt;
&lt;li&gt;Cloudflare proxies the request, then looks at the Host header and relays the traffic to the correct server.&lt;/li&gt;
&lt;li&gt;The C2 Server then responds to Cloudflare with the C2 Commands.&lt;/li&gt;
&lt;li&gt;The Victim then receives the command from Cloudflare.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;c2-profiles&#34;&gt;C2 Profiles&lt;/h3&gt;
&lt;p&gt;The next technique goes by several names by several different products, &amp;ldquo;NGINX Reverse Proxy&amp;rdquo;, &amp;ldquo;Apache Mod_Proxy/Mod_Rewrite&amp;rdquo;,  &amp;ldquo;Malleable HTTP C2 Profiles&amp;rdquo;, and many others. However, they are all more or less the same. All of the Proxy features more or less allow a user to control specific elements of the incoming HTTP request. Let&amp;rsquo;s say an incoming connection request has an &amp;ldquo;X-C2-Server&amp;rdquo; header; we could explicitly extract this header using the specific technology that is at your disposal (Reverse Proxy, Mod_Proxy/Rewrite, Malleable C2 Profile, etc.) and ensure that your C2 server responds with C2 based responses. Whereas if a normal user queried the HTTP Server, they might see a generic webpage. This is all dependent on your configuration.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;A Compromised Device and Security Analyst reach out to a C2 server&#34; src=&#34;../../img/C2Profiles.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;The diagram above depicts how C2 profiles work:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The Victim beacons out to the C2 Server with a custom header in the HTTP request, while a SOC Analyst has a normal HTTP Request&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The requests are proxied through Cloudflare&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The C2 Server receives the request and looks for the custom header, and then evaluates how to respond based on the C2 Profile.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The C2 Server responds to the client and responds to the Analyst/Compromised device.&lt;/p&gt;
&lt;p&gt;Because HTTPS requests are encrypted, extracting specific headers (ex: X-C2-Server, or Host) may be impossible. By using C2 Profiles, we may be able to hide our C2 server from the prying eyes of a Security Analyst. For more information on how C2 profiles can be powerful, see this blog post on &lt;a href=&#34;https://blog.zsec.uk/cobalt-strike-profiles/&#34;&gt;Understanding Malleable C2 Profiles for Cobalt Strike&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;common-c2-frameworks&#34;&gt;Common C2 Frameworks&lt;/h2&gt;
&lt;p&gt;There are several C2 frameworks available. There devided in two different groups, the &lt;strong&gt;free C2 framework&lt;/strong&gt; and the &lt;strong&gt;premium C2 framework&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;free-c2-framework&#34;&gt;Free C2 Framework&lt;/h3&gt;
&lt;h4 id=&#34;metasploit&#34;&gt;Metasploit&lt;/h4&gt;
&lt;p&gt;The &lt;strong&gt;&lt;a href=&#34;https://www.metasploit.com/&#34;&gt;Metasploit framework&lt;/a&gt;&lt;/strong&gt; is developed by Rapid7 is one of the most popural Exploitation and Post Exploitation frameworks (C2). Is preinstalled on the most penetration testing distribution OS.
&lt;img alt=&#34;alt text&#34; src=&#34;../../img/Metasploit.png&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;armitage&#34;&gt;Armitage&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://web.archive.org/web/20211006153158/http://www.fastandeasyhacking.com/&#34;&gt;Armitage&lt;/a&gt;&lt;/strong&gt; is a extension of Metasploit framework - its add GUI user interface, is very similar to Cobalt Strike. This becouse both are developed by Raphael Mudge.
One of the most popular can be found in the &lt;strong&gt;“Attacks”&lt;/strong&gt; menu; This feature is known as the &lt;strong&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=TZyrgTp3KoA&#34;&gt;Hail Mary attack&lt;/a&gt;&lt;/strong&gt;, which attempts to run all exploits for the services running on a specific workstation. Armitage really is &lt;strong&gt;“Fast and Easy Hacking”&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;alt text&#34; src=&#34;../../img/Armitage.png&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;powershell-empirestarkiller&#34;&gt;Powershell Empire/Starkiller&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://bc-security.gitbook.io/empire-wiki&#34;&gt;Powershell Empire&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href=&#34;https://github.com/BC-SECURITY/Starkiller&#34;&gt;Starkiller&lt;/a&gt;&lt;/strong&gt; is another incredibly popular C2 originally created by Harmjoy, Sixdub, and Enigma0x3 from Veris Group. Currently, the project has been discontinued and has been picked up by the BC Security team (Cx01N, Hubbl3, and _Vinnybod). Empire features agents written in various languages compatible with multiple platforms, &lt;strong&gt;making it an incredibly versatile C2&lt;/strong&gt;.
&lt;img alt=&#34;alt text&#34; src=&#34;../../img/PowershellEmpire.png&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;covenant&#34;&gt;Covenant&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;//localhost:1313/&#34;&gt;Covenant&lt;/a&gt;&lt;/strong&gt; by Ryan Cobb it is one of the most unique C2 Frameworks being &lt;strong&gt;written in C#.&lt;/strong&gt; Unlike Metasploit/Armitage, It’s &lt;strong&gt;primarily used for post-exploitation and lateral movement&lt;/strong&gt; with HTTP, HTTPS, and SMB listeners with highly customizable agents.
&lt;img alt=&#34;alt text&#34; src=&#34;../../img/Covenant.png&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;sliver&#34;&gt;Sliver&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/BishopFox/sliver&#34;&gt;Sliver&lt;/a&gt;&lt;/strong&gt; by &lt;strong&gt;&lt;a href=&#34;https://bishopfox.com/&#34;&gt;Bishop Fox&lt;/a&gt;&lt;/strong&gt; is an advanced, highly customizable multi-user, CLI-based C2 framework. &lt;strong&gt;Sliver is written in Go&lt;/strong&gt;, which makes reverse &lt;strong&gt;engineering the C2 &amp;ldquo;implants&amp;rdquo; incredibly difficult&lt;/strong&gt;. It supports various protocols for C2 communications like WireGuard, mTLS, HTTP(S), DNS, and much more. Additionally, it supports BOF files for additional functionality, DNS Canary Domains for masking C2 communications, automatic Let&amp;rsquo;s Encrypt certificate generation for HTTPS beacons, and much more.&lt;br&gt;
&lt;img alt=&#34;alt text&#34; src=&#34;../../img/Silver.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;paid-c2-framework&#34;&gt;Paid C2 Framework&lt;/h3&gt;
&lt;h4 id=&#34;cobalt-strike&#34;&gt;Cobalt Strike&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.cobaltstrike.com/&#34;&gt;Cobalt Strike&lt;/a&gt;&lt;/strong&gt; by Help Systems (Formerly created by Raphael Mudge) is arguably one of the most famous Command and Control frameworks next to Metasploit. Much like Artimage, it is written in Java and designed to be as flexible as possible. For more information, see Cobalt Strike’s &lt;strong&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLcjpg2ik7YT6H5l9Jx-1ooRYpfvznAInJ&#34;&gt;Video Training Page&lt;/a&gt;&lt;/strong&gt;. It offers additional insight into both Red Team Operations and the Framework by Raphael Mudge himself.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;alt text&#34; src=&#34;../../img/CobaltStrike.png&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;brute-ratel&#34;&gt;Brute Ratel&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://bruteratel.com/&#34;&gt;Brute Ratel&lt;/a&gt;&lt;/strong&gt; by Chetan Nayak or Paranoid Ninja is a Command and Control framework marketed as a &lt;strong&gt;“Customizable Command and Control Center” or “C4”&lt;/strong&gt; framework that provides a true adversary simulation-like experience with being a unique C2 framework. For more information about the Framework, the author has provided a Video Training Page that demonstrates many of the capabilities within the framework.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;alt text&#34; src=&#34;../../img/BruteRatel.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;other-c2-frameworks&#34;&gt;Other C2 Frameworks&lt;/h3&gt;
&lt;p&gt;For a more comprehensive list of C2 Frameworks and their capabilities, check out the “&lt;strong&gt;&lt;a href=&#34;https://howto.thec2matrix.com/&#34;&gt;C2 Matrix&lt;/a&gt;&lt;/strong&gt;”, a project maintained by &lt;strong&gt;Jorge Orchilles&lt;/strong&gt; and &lt;strong&gt;Bryson Bort&lt;/strong&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;setup-armitage-c2&#34;&gt;Setup Armitage C2&lt;/h2&gt;
&lt;p&gt;Downloading , Building, and install Armitage&lt;/p&gt;
&lt;p&gt;To download armitage we can download them on &lt;a href=&#34;https://gitlab.com/kalilinux/packages/armitage&#34;&gt;there git repository&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone https://gitlab.com/kalilinux/packages/armitage.git &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cd armitage
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Netx up, build the project with &lt;strong&gt;package.sh&lt;/strong&gt; script&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bash package.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;if build was successful in the release is in &lt;strong&gt;./release/unix&lt;/strong&gt; folder&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd ./release/unix/ &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ls -la
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;teamserver&#34;&gt;Teamserver&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Teamserver&lt;/strong&gt; is a file that will start the Armitage server that multiple users will able to connect to. This file contains&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;IP Address&lt;/strong&gt;: The Red Team operetors  will use IP address to connet&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Shared Password&lt;/strong&gt;:The Red Team operetors use the Shared Password to access the Armitage server.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Armitage&lt;/strong&gt; is the file will using to connect to armitage server. When the binary execute a new propt will open up, chose a username and insert the password.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;alt text&#34; src=&#34;../../img/ConnetArmitage.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;prepare-environment&#34;&gt;Prepare Environment&lt;/h3&gt;
&lt;p&gt;Before launch Armitage we musto do a few pre-flight checks to ensure Metasploit is configured properly.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Postgresql&lt;/strong&gt;
Satrt postgresql db.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;systemctl start postgresql &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; systemctl status postgresql
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Metasploit DB&lt;/strong&gt;
Initialize the  Metasploit Database.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; msfdb --use-defaults delete
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; msfdb --use-defaults init
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Starting connection to Armitage&lt;/strong&gt;
To start teamserver&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd /opt/armitage/release/unix &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ./teamserver YourIP &amp;lt;Passowrd&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To start armitage client&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd /opt/armitage/release/unix &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ./armitage
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;[!NOTE]
When operating a C2 Framework, you never want to expose the management interface publicly; &lt;strong&gt;You should always listen on a local interface&lt;/strong&gt;. This complicates access for fellow operators. Fortunately, there is an easy solution for this. For operators to gain access to the server, you should create a new user account for them and enable SSH access on the server, and they will be able to &lt;strong&gt;SSH port forward&lt;/strong&gt; TCP/55553.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;c2-operation-basics&#34;&gt;C2 Operation Basics&lt;/h2&gt;
&lt;h2 id=&#34;advanced-c2-setups&#34;&gt;Advanced C2 Setups&lt;/h2&gt;
</content>
    </item>
    
  </channel>
</rss>
